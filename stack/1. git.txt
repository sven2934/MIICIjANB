Існують два типи систем контролю версій:
1. Централізовані
2.Розподілені (GIT)

Дерево (tree) - відноситься до структури даних, яка представляє каталоги, файли та їхню ієрархію в репозиторії. Кожен файл в дереві представлений своїм SHA-1 хешем.

Блоб (blob) - відноситься до об’єкта, який представляє вміст конкретного файла в репозиторії. Кожен блоб має свій унікальний ідентифікатор, який генерується на основі вмісту файлу за допомогою хеш функцій (SHA-1).

Налаштування GIT
    git config --global user.name "Dmytro"
    git config --global user.email "test@email.com"
    git config --list = подивитись поточну конфігурацію

Ініціалізація GIT у проекті:
    git init
    git remote add назва “посилання”
    git add --all
    git commit -m “Initial commit”
    git push

git clone - команда, яка створює копію віддаленого репозиторія.
git log - команда, яка використовується для перегляду історії комітів у репозиторії.
git commit --amend - зміна останнього коміту. (коли потрібно виправити невеликі помилки в останньому коміті перед його публікацією).
git push <remote> <branch> - <remote> це назва віддаленого репозиторію, <branch> вказує на назву гілки.
git stash - використовується для збереження незакінчених змін у робочій директорії. Для відновлення збережених стешів, використовуємо команду git stash pop.
git mv <джерело> <ціль> - для переміщення або перейменування файлів та каталогів. Для перейменування: git mv oldfile.txt newfile.txt. Для переміщення: git mv file.txt newdir/
git rm <файл> - для видалення файлів з репозиторію. Якщо файл вже був відстежуваний (tracked) GIT та має зміни в останньому коміті, можна використати флаг -f або -force щоб примусово видалити його, ось приклад використання з цим флагом: git rm -f file.txt.
git checkout <file> - для відновлення файлів з попередніх комітів або відміни незакомічених змін у робочій директорії (git restore).
git tag - для створення, перегляду або видалення тегів:
    Створення: git tag -a <ім’я тега> -m <повідомлення>
    Перегляд списку тегів: git tag
    Перегляд інфо про конкретний тег: git show <ім’я тега>
    Видалення тега: git tag -d <ім’я тега>
git diff - відображення різниці між різними станами файлів у репозиторії
git branch для управління гілками (branches) у репозиторії:
    Створення git branch <name>
    Перегляд списку гілок git branch
    Перехід на іншу гілку git checkout <name of branch>
    Видалення git branch -d <name of branch>
git merge для об’єднання змін з однієї гілки в іншу. Наприклад, якщо знаходимось на гілці ‘feature’ і хочемо об’єднати зміни з гілки ‘develop’ у поточну : git merge develop.

Файл .gitignore - файл, який містить список шаблонів для виключення певних файлів та каталогів з відстеження GIT. Приклади:
file.txt      # ігнорувати файл
/logs/       # ігнорувати каталог logs та весь його зміст
*.log         # ігнорувати всі файли з розширенням .log
