Залежно від того, яка версія Python встановлена в системі, потрібно використовувати pip3 замість pip.
pip --version - коли встановлено Python 2.7
pip3 --version - коли встановлено Python 3.10

Правила назви змінних:
    назва змінної може складатися тільки з літер, цифр та символу підкреслення;
    назва не може починатися з цифри;
    назва не може містити спеціальних символів @, $, %.

Рекомендації щодо найменування функцій, класів та змінних:
    назви змінних зазвичай пишуться або повністю великими, або повністю малими літерами (наприклад, DB_NAME, db_name);
    назви функцій задаються малими літерами з підкресленнями між словами (наприклад, get_names);
    назви класів задаються словами з великими початковими літерами без пробілів, це так званий CamelCase (наприклад, CiscoSwitch).

Типи даних
У Python існує кілька стандартних типів даних:
    Числа (Numbers)
    Рядки (Strings)
    Списки (Lists)
    Словники (Dictionaries)
    Кортежі (Tuples)
    Множини (Sets)
    Булевий тип даних (Boolean)
Ці типи даних, в свою чергу, можна класифікувати за кількома ознаками:
    Змінні (словники, списки та множини)
    Незмінні (числа, рядки та множини)
    Впорядковані (рядки, списки, кортежі та словники)
    Невпорядковані (множини)

bin(8) - дозволяє отримати двійкове представлення числа (результат - рядок)
hex(10) - дозволяє отримати шістнадцяткове значення

РЯДКИ. Срізи рядків:
a = 'interface FastEthernet1/0'
a[0:9]     // interface
a[10:22]   // FastEthernet
a[10:]     // FastEthernet1/0
a[-3:]     // 1/0
a = '0123456789'
a[1::2]    // 13579
a[::2]     // 02468
a[::]      // 0123456789
a[::-1]    // 9876543210

Корисні методи для роботи з рядками:
1. upper(): перетворює всі символи рядка на великі літери;
2. lower(): перетворює всі символи рядка на малі літери;
3. swapcase(): змінює регістр символів у рядку, великі літери стають малими а малі - великими;
4. capitalize(): перетворює перший символ рядка на велику літеру, а всі інші на малі;
5. join(): збирає список рядків в один рядок з роздільником, вказаним наступним чином `,`.join([‘10’,’12’,’14’]);
6. count(): використовується для підрахунку того, скільки разів символ або підрядок зустрічаються у рядку;
7. find(): показує на якій позиції знаходиться перший символ переданого підрядка(для першого збігу);
8. startwith() & endwith(): перевірка, чи рядок починається або закінчується певними символами. Методам можна передавати кілька значень (обов’язково як кортеж). Приклад: a.startwith((‘a’, ‘b’));
9. replace(): заміна послідовності символів у рядку на іншу послідновність. Приклад: “test”.replace(“test”,”done”);
10. strip(): у рядку можуть бути певні спецсимволи (наприклад, розділові рядки). Для їх видалення існує цей метод. За замовчуванням метод видаляє пробільні символи (\t\n\r\f\v). Метод може приймати будь-які символи в якості аргументу (наприклад, .strip('[]')). Якщо потрібно видалити символи тільки зліва або тільки справа, можна використовувати методи lstrip() і rstrip().
11. split(): Метод розбиває рядок на частини, використовуючи символ (або символи) як роздільник і повертає список рядків. За замовчуванням в якості роздільника використовуються пробільні символи (пробіли, табуляція, переведення рядка), але в дужках можна вказати будь-який інший роздільник. Наприклад - string1.split(',').


ФОРМАТУВАННЯ РЯДКІВ
Існує декілька варіантів форматування рядків:
1. Метод format()
2. F-рядки (з’явився в Python 3.6)

Форматування рядків з методом format():
“interface /{}”.format(“1”)
Спеціальний символ {} вказує, що сюди вставиться значення, яке передається методу format. При цьому кожна пара фігурних дужок позначає одне місце для вставки. Значення, які вставляються в фігурні дужки, можуть бути різних типів. Наприклад, це може бути рядок, число або список.
Вивід також може бути багаторядковим:
ip_template = '''
IP address:
{}
'''


print(ip_template.format('10.1.1.1'))
Можна конвертувати числа у двійковий формат:
'{:b} {:b} {:b} {:b}'.format(192, 100, 1, 1)  # '11000000 1100100 1 1'
У фігурних дужках можна вказувати імена. Це дозволяє передавати аргументи в будь-якому порядку і робить шаблон більш зрозумілим:
'{ip}/{mask}'.format(mask=24, ip='10.1.1.1')  # '10.1.1.1/24'

Ще одна корисна можливість форматування рядків - вказання номера аргумента. Завдяки цьому, наприклад, можна позбавитися від повторного передавання одних і тих же значень:
'{1}/{0}'.format(24, '10.1.1.1')  # '11000000 1100100 1 1'

Список (List) - Змінна впорядкованого типу даних (Послідовність елементів), розділених між собою комою та заключених в квадратні дужки.
len() - повертає кількість елементів в списку.
sorted() - сортує елементи списку за зростанням і повертає новий список з відсортованими елементами (старий залишається незмінним).
append() - додає в кінець списку вказаний елемент.
extend() - для об’єднання двох списків.
pop() - видаляє елемент, який відповідає вказаному індексу. Проте, що важливо, метод повертає цей елемент. Якщо не вказати індекс то повернеться та зникне останній елемент.
remove() - на відміну від pop() він після видалення не повертає цей елемент. Як параметр потрібно передавати сам елемент а не його індекс.
index() - щоб дізнатися індекс елемента.
insert() - дозволяє вставити елемент на певне місце у списку.
sort() - сортує список на місці не створюючи новий список.

Словник (Dictionary) - це змінюваний упорядкований тип даних, який використовує пари ключ: значення для зберігання даних. Ось деякі важливі особливості словників:
Дані в словнику представлені у вигляді пар ключ: значення.
До доступу до значень використовується ключ, а не індекс, як у списках.
Порядок елементів у словнику відображається порядком їх додавання.
Словники є змінюваними.
Ключі повинні бути об'єктами не змінюваного типу даних, такими як числа, рядки або кортежі.
Значення можуть бути будь-якого типу.
В словнику в якості значення можна використовувати словник:
london_co = {
'r1': {
   'hostname': 'london_r1',
   'location': '21 New Globe Walk'
}
}
sorted() - може бути використана для сортування ключів словника за зростанням і створення нового списку, який містить відсортовані ключі.
clear() - очистка словника.
get() - Запитує ключ, і якщо його немає, то замість помилки повертає `None` (або наприклад в такому записі .get(‘ios’, ‘Ooops’) замість ‘None’ буде ‘Ooops’).
setdefault(keyname, value) - шукає ключ, якщо його немає - замість помилки створює цей ключ зі значенням ‘None’ (або значення яке ввів користувач як параметр value).




